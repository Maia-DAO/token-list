const {
  networkToEndpointId,
  chainAndStageToNetwork,
  EndpointVersion,
  Stage,
} = require('@layerzerolabs/lz-definitions')

// Partner token symbols that should be included in the primary token list
const PARTNER_TOKEN_SYMBOLS = [
  'frxUSD',
  'sfrxUSD',
  'frxETH',
  'sfrxETH',
  'WFRAX',
  'FXS',
  'FPI',
  'EUL',
  'ORDER',
  'WAGMI',
  'Anon',
  'RDNT',
  'MAV',
  'ZRO',
  'WETH',
  'USDC',
  'USDT',
  'USD₮0',
  'DAI',
  'PEAQ',
  'USDe',
  'mETH',
  'Manta mETH',
  'mBTC'
  'Manta mBTC'
]

// Coingecko and CoinMarketCap ID mappings for specific tokens
const OVERRIDE_CG_CMC_ID = {
  'frxUSD': { coingeckoId: 'frax-usd', coinMarketCapId: 36039 },
  'sfrxUSD': { coingeckoId: 'staked-frax-usd', coinMarketCapId: 36038 },
}

// Override OFT Metadata Pegged To Info
const OVERRIDE_PEG = {
  'USD₮0': { chainName: 'arbitrum', address: '0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9' },
  'frxUSD': { chainName: 'ethereum', address: '0xCAcd6fd266aF91b8AeD52aCCc382b4e165586E29' },
  'sfrxUSD': { chainName: 'ethereum', address: '0xcf62F905562626CfcDD2261162a51fd02Fc9c5b6' },
  'STG': { chainName: 'ethereum', address: '0xAf5191B0De278C7286d6C7CC6ab6BB8A73bA2Cd6' },
  'ZRO': { chainName: 'ethereum', address: '0x6985884C4392D348587B19cb9eAAf157F13271cd' },
}

// Override logos for specific tokens
const OVERRIDE_LOGO = {
  'REUNI': 'https://s2.coinmarketcap.com/static/img/coins/128x128/23996.png',
  'sUSDa': 'https://s2.coinmarketcap.com/static/img/coins/128x128/35538.png',
  'UNB': 'https://s2.coinmarketcap.com/static/img/coins/128x128/7846.png',
  'BAI': 'https://s2.coinmarketcap.com/static/img/coins/128x128/28503.png',
  'USBD': 'https://s2.coinmarketcap.com/static/img/coins/128x128/36149.png',
  'IRL': 'https://s2.coinmarketcap.com/static/img/coins/128x128/20858.png',
  'LYM': 'https://s2.coinmarketcap.com/static/img/coins/128x128/2554.png',
  'FRAX': 'https://raw.githubusercontent.com/trustwallet/assets/refs/heads/master/blockchains/ethereum/assets/0x853d955aCEf822Db058eb8505911ED77F175b99e/logo.png',
}

// Extended supported chain IDs 
// @dev copied from hermes UI frontend chainInfo.ts 
const EXTENDED_SUPPORTED_CHAIN_IDS = [
  196,
  30,
  60808,
  957,
  747,
  200901,
  7700,
  57073,
  1116,
  1996,
  1729,
  534352,
  33139,
  42220,
  239,
  1329,
  295,
  4200,
  50,
  480,
  747474,
  42170,
  1890,
  1313161554,
  43111,
  388,
  8822,
  130,
  999,
  291,
  7777777,
  3338,
  204,
  111188,
  55244,
  169,
  1625,
  2345,
  100,
  2818,
  59144,
  122,
  1868,
  1030,
  6900,
  25,
  42793,
  232,
  1514,
  167000,
  50104,
  98866,
  1135,
  6001,
  41923,
  14,
  1380012617,
  34443,
  81457,
  11501,
  5000,
]

// Supported chains List.
const SUPPORTED_CHAINS = [
  'ethereum',
  'arbitrum',
  'base',
  'bsc',
  'bera',
  'optimism',
  'metis',
  'avalanche',
  'sonic',
  'polygon',
  'swell',
  'fraxtal',
  // Extended chain IDs
  // @dev copied from hermes UI frontend chains.ts
  // 'xlayer',
  'rootstock',
  'bob',
  // 'lyra',
  'flow',
  'bitlayer',
  // 'canto',
  'ink',
  'coredao',
  'sanko',
  // 'reya',
  'scroll',
  'ape',
  'celo',
  'tac',
  'sei',
  // 'hedera',
  'merlin',
  'xdc',
  'worldchain',
  'katana',
  'nova',
  'lightlink',
  // 'aurora',
  // 'hemi',
  // 'cronoszkevm',
  // 'iota',
  'unichain',
  'hyperliquid',
  'orderly',
  'zora',
  'peaq',
  'opbnb',
  // 'real',
  'superposition',
  'manta',
  'gravity',
  'goat',
  'gnosis',
  'morph',
  'linea',
  // 'fuse',
  'soneium',
  // 'conflux',
  'nibiru',
  // 'cronosevm',
  // 'etherlink',
  // 'lens',
  // 'story',
  'taiko',
  // 'sophon',
  'plumephoenix',
  // 'lisk',
  // 'bouncebit',
  // 'edu',
  'flare',
  // 'rarible',
  'mode',
  'blast',
  'bevm',
  'mantle',
]

// Maps chainId to chainKey in ofts.json
const CHAIN_KEYS = {
  // Supported chain IDs
  1: 'ethereum',
  42161: 'arbitrum',
  8453: 'base',
  56: 'bsc',
  80094: 'bera',
  10: 'optimism',
  1088: 'metis',
  43114: 'avalanche',
  146: 'sonic',
  137: 'polygon',
  1923: 'swell',
  252: 'fraxtal',
  // Extended chain IDs
  // @dev copied from hermes UI frontend chains.ts
  196: 'xlayer',
  30: 'rootstock',
  60808: 'bob',
  957: 'lyra',
  747: 'flow',
  200901: 'bitlayer',
  7700: 'canto',
  57073: 'ink',
  1116: 'coredao',
  1996: 'sanko',
  1729: 'reya',
  534352: 'scroll',
  33139: 'ape',
  42220: 'celo',
  239: 'tac',
  1329: 'sei',
  295: 'hedera',
  4200: 'merlin',
  50: 'xdc',
  480: 'worldchain',
  747474: 'katana',
  42170: 'nova',
  1890: 'lightlink',
  1313161554: 'aurora',
  43111: 'hemi',
  388: 'cronoszkevm',
  8822: 'iota',
  130: 'unichain',
  999: 'hyperliquid',
  291: 'orderly',
  7777777: 'zora',
  3338: 'peaq',
  204: 'opbnb',
  111188: 'real',
  55244: 'superposition',
  169: 'manta',
  1625: 'gravity',
  2345: 'goat',
  100: 'gnosis',
  2818: 'morph',
  59144: 'linea',
  122: 'fuse',
  1868: 'soneium',
  1030: 'conflux',
  6900: 'nibiru',
  25: 'cronosevm',
  42793: 'etherlink',
  232: 'lens',
  1514: 'story',
  167000: 'taiko',
  50104: 'sophon',
  98866: 'plumephoenix',
  1135: 'lisk',
  6001: 'bouncebit',
  41923: 'edu',
  14: 'flare',
  1380012617: 'rarible',
  34443: 'mode',
  81457: 'blast',
  11501: 'bevm',
  5000: 'mantle',
}

// Mapping of chainKey to chain ID
const CHAIN_KEY_TO_ID = {
  // Supported chain IDs
  ethereum: 1,
  arbitrum: 42161,
  base: 8453,
  bsc: 56,
  bera: 80094,
  optimism: 10,
  metis: 1088,
  avalanche: 43114,
  sonic: 146,
  polygon: 137,
  swell: 1923,
  fraxtal: 252,
  // Extended chain IDs
  xlayer: 196,
  rootstock: 30,
  bob: 60808,
  lyra: 957,
  flow: 747,
  bitlayer: 200901,
  canto: 7700,
  ink: 57073,
  coredao: 1116,
  sanko: 1996,
  reya: 1729,
  scroll: 534352,
  ape: 33139,
  celo: 42220,
  tac: 239,
  sei: 1329,
  hedera: 295,
  merlin: 4200,
  xdc: 50,
  worldchain: 480,
  katana: 747474,
  nova: 42170,
  lightlink: 1890,
  aurora: 1313161554,
  hemi: 43111,
  cronoszkevm: 388,
  iota: 8822,
  unichain: 130,
  hyperliquid: 999,
  orderly: 291,
  zora: 7777777,
  peaq: 3338,
  opbnb: 204,
  real: 111188,
  superposition: 55244,
  manta: 169,
  gravity: 1625,
  goat: 2345,
  gnosis: 100,
  morph: 2818,
  linea : 59144,
  fuse: 122,
  soneium: 1868,
  conflux: 1030,
  nibiru: 6900,
  cronosevm: 25,
  etherlink: 42793,
  lens: 232,
  story: 1514,
  taiko: 167000,
  sophon: 50104,
  plumephoenix: 98866,
  lisk: 1135,
  bouncebit: 6001,
  edu: 41923,
  flare: 14,
  rarible: 1380012617,
  mode: 34443,
  blast: 81457,
  bevm: 11501,
  mantle: 5000,
}

const OVERRIDE_LZNETWORKS = {
  'linea': 'zkconsensys-mainnet',
}

const CHAIN_KEY_TO_EID = Object.values(CHAIN_KEYS).reduce((map, chainKey) => {
  const net = OVERRIDE_LZNETWORKS[chainKey] ?? chainAndStageToNetwork(chainKey, Stage.MAINNET)
  map[chainKey] = {
    v1: networkToEndpointId(net, EndpointVersion.V1),
    v2: networkToEndpointId(net, EndpointVersion.V2),
  }
  return map
}, {})

const EID_TO_VERSION = Object.values(CHAIN_KEY_TO_EID).reduce((map, { v1, v2 }) => {
  map[v1] = 1
  map[v2] = 2
  return map
}, {})


// // Convert chain name to endpoint ID
// const CHAIN_KEY_TO_EID = {
//   ethereum: {
//     v1: networkToEndpointId(chainAndStageToNetwork('ethereum', Stage.MAINNET), EndpointVersion.V1),
//     v2: networkToEndpointId(chainAndStageToNetwork('ethereum', Stage.MAINNET), EndpointVersion.V2),
//   },
//   arbitrum: {
//     v1: networkToEndpointId(chainAndStageToNetwork('arbitrum', Stage.MAINNET), EndpointVersion.V1),
//     v2: networkToEndpointId(chainAndStageToNetwork('arbitrum', Stage.MAINNET), EndpointVersion.V2),
//   },
//   base: {
//     v1: networkToEndpointId(chainAndStageToNetwork('base', Stage.MAINNET), EndpointVersion.V1),
//     v2: networkToEndpointId(chainAndStageToNetwork('base', Stage.MAINNET), EndpointVersion.V2),
//   },
//   bsc: {
//     v1: networkToEndpointId(chainAndStageToNetwork('bsc', Stage.MAINNET), EndpointVersion.V1),
//     v2: networkToEndpointId(chainAndStageToNetwork('bsc', Stage.MAINNET), EndpointVersion.V2),
//   },
//   bera: {
//     v1: networkToEndpointId(chainAndStageToNetwork('bera', Stage.MAINNET), EndpointVersion.V1),
//     v2: networkToEndpointId(chainAndStageToNetwork('bera', Stage.MAINNET), EndpointVersion.V2),
//   },
//   optimism: {
//     v1: networkToEndpointId(chainAndStageToNetwork('optimism', Stage.MAINNET), EndpointVersion.V1),
//     v2: networkToEndpointId(chainAndStageToNetwork('optimism', Stage.MAINNET), EndpointVersion.V2),
//   },
//   metis: {
//     v1: networkToEndpointId(chainAndStageToNetwork('metis', Stage.MAINNET), EndpointVersion.V1),
//     v2: networkToEndpointId(chainAndStageToNetwork('metis', Stage.MAINNET), EndpointVersion.V2),
//   },
//   avalanche: {
//     v1: networkToEndpointId(chainAndStageToNetwork('avalanche', Stage.MAINNET), EndpointVersion.V1),
//     v2: networkToEndpointId(chainAndStageToNetwork('avalanche', Stage.MAINNET), EndpointVersion.V2),
//   },
//   sonic: {
//     v1: networkToEndpointId(chainAndStageToNetwork('sonic', Stage.MAINNET), EndpointVersion.V1),
//     v2: networkToEndpointId(chainAndStageToNetwork('sonic', Stage.MAINNET), EndpointVersion.V2),
//   },
//   polygon: {
//     v1: networkToEndpointId(chainAndStageToNetwork('polygon', Stage.MAINNET), EndpointVersion.V1),
//     v2: networkToEndpointId(chainAndStageToNetwork('polygon', Stage.MAINNET), EndpointVersion.V2),
//   },
//   swell: {
//     v1: networkToEndpointId(chainAndStageToNetwork('swell', Stage.MAINNET), EndpointVersion.V1),
//     v2: networkToEndpointId(chainAndStageToNetwork('swell', Stage.MAINNET), EndpointVersion.V2),
//   },
//   fraxtal: {
//     v1: networkToEndpointId(chainAndStageToNetwork('fraxtal', Stage.MAINNET), EndpointVersion.V1),
//     v2: networkToEndpointId(chainAndStageToNetwork('fraxtal', Stage.MAINNET), EndpointVersion.V2),
//   },
// }

// // Convert eid to version
// const EID_TO_VERSION = {
//   [networkToEndpointId(chainAndStageToNetwork('ethereum', Stage.MAINNET), EndpointVersion.V1)]: 1,
//   [networkToEndpointId(chainAndStageToNetwork('ethereum', Stage.MAINNET), EndpointVersion.V2)]: 2,
//   [networkToEndpointId(chainAndStageToNetwork('arbitrum', Stage.MAINNET), EndpointVersion.V1)]: 1,
//   [networkToEndpointId(chainAndStageToNetwork('arbitrum', Stage.MAINNET), EndpointVersion.V2)]: 2,
//   [networkToEndpointId(chainAndStageToNetwork('base', Stage.MAINNET), EndpointVersion.V1)]: 1,
//   [networkToEndpointId(chainAndStageToNetwork('base', Stage.MAINNET), EndpointVersion.V2)]: 2,
//   [networkToEndpointId(chainAndStageToNetwork('bsc', Stage.MAINNET), EndpointVersion.V1)]: 1,
//   [networkToEndpointId(chainAndStageToNetwork('bsc', Stage.MAINNET), EndpointVersion.V2)]: 2,
//   [networkToEndpointId(chainAndStageToNetwork('bera', Stage.MAINNET), EndpointVersion.V1)]: 1,
//   [networkToEndpointId(chainAndStageToNetwork('bera', Stage.MAINNET), EndpointVersion.V2)]: 2,
//   [networkToEndpointId(chainAndStageToNetwork('optimism', Stage.MAINNET), EndpointVersion.V1)]: 1,
//   [networkToEndpointId(chainAndStageToNetwork('optimism', Stage.MAINNET), EndpointVersion.V2)]: 2,
//   [networkToEndpointId(chainAndStageToNetwork('metis', Stage.MAINNET), EndpointVersion.V1)]: 1,
//   [networkToEndpointId(chainAndStageToNetwork('metis', Stage.MAINNET), EndpointVersion.V2)]: 2,
//   [networkToEndpointId(chainAndStageToNetwork('avalanche', Stage.MAINNET), EndpointVersion.V1)]: 1,
//   [networkToEndpointId(chainAndStageToNetwork('avalanche', Stage.MAINNET), EndpointVersion.V2)]: 2,
//   [networkToEndpointId(chainAndStageToNetwork('sonic', Stage.MAINNET), EndpointVersion.V1)]: 1,
//   [networkToEndpointId(chainAndStageToNetwork('sonic', Stage.MAINNET), EndpointVersion.V2)]: 2,
//   [networkToEndpointId(chainAndStageToNetwork('polygon', Stage.MAINNET), EndpointVersion.V1)]: 1,
//   [networkToEndpointId(chainAndStageToNetwork('polygon', Stage.MAINNET), EndpointVersion.V2)]: 2,
//   [networkToEndpointId(chainAndStageToNetwork('swell', Stage.MAINNET), EndpointVersion.V1)]: 1,
//   [networkToEndpointId(chainAndStageToNetwork('swell', Stage.MAINNET), EndpointVersion.V2)]: 2,
//   [networkToEndpointId(chainAndStageToNetwork('fraxtal', Stage.MAINNET), EndpointVersion.V1)]: 1,
//   [networkToEndpointId(chainAndStageToNetwork('fraxtal', Stage.MAINNET), EndpointVersion.V2)]: 2,
// }

module.exports = {
  CHAIN_KEYS,
  CHAIN_KEY_TO_ID,
  CHAIN_KEY_TO_EID,
  EID_TO_VERSION,
  SUPPORTED_CHAINS,
  EXTENDED_SUPPORTED_CHAIN_IDS,
  OVERRIDE_PEG,
  OVERRIDE_LOGO,
  OVERRIDE_CG_CMC_ID,
  PARTNER_TOKEN_SYMBOLS
}
